name: SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -uroot -proot --silent; then
              echo "✅ MySQL is up"
              break
            fi
            echo "Waiting for MySQL ($i)..."
            sleep 2
          done

      - name: Create harmonia database
        run: |
          mysql -h 127.0.0.1 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS harmoniaapi;"

      - name: Import SQL structure (optional)
        run: |
          mysql -h 127.0.0.1 -uroot -proot harmoniaapi < infra/mysql/dump/harmoniaapi.sql

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Gikali_Harmonia_API_nico

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: package.jar
          path: ./target/*.jar



  docker-build-image-api:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package.jar
          path: .
      - name: Rename jar
        run: mv *.jar package.jar



      - name: Check jar file is here
        run: |
          echo "✅ Liste des fichiers présents :"
          ls -lh
          if [ ! -f package.jar ]; then
            echo "❌ Le fichier package.jar est introuvable à la racine."
            exit 1
          fi

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/harmoniaapinico:latest

      - run: echo "🟢 This job's status is ${{ job.status }}."
